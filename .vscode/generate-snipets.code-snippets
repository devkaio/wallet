{
    "Print to console": {
        "scope": "dart",
        "description": "Generate State for Classs",
        "prefix": "gst",
        "body": [
            "abstract class $1State {}",
            "",
            "class $1StateSuccess implements $1State {}",
            "",
            "class $1StateFailure implements $1State {",
            "final Failure error;",
            "$1StateFailure({",
            "required this.error,",
            "});",
            "}",
            "",
            "class $1StateLoading implements $1State {}",
            "",
            "class $1StateEmpty implements $1State {}",
            "",
            "extension $1StateExt on $1State {",
            "when({",
            "Function? success,",
            "Function? failure,",
            "Function? loading,",
            "Function? empty,",
            "required Function orElse,",
            "}) {",
            "switch(runtimeType){",
            "    case $1StateSuccess:",
            "    {",
            "      if (success != null) return success();",
            "      return orElse();",
            "    }",
            "  case $1StateFailure:",
            "    {",
            "      if (failure != null) return failure();",
            "      return orElse();",
            "    }",
            "",
            "  case $1StateLoading:",
            "    {",
            "      if (loading != null) return loading();",
            "      return orElse();",
            "    }",
            "  case $1StateEmpty:",
            "    {",
            "      if (empty != null) return empty();",
            "      return orElse();",
            "    }",
            "  default:",
            "    {",
            "      return orElse();",
            "    }",
            "}",
            "}",
            "}",
        ],
    },
    "reaction": {
        "scope": "dart",
        "description": "Generate reaction for Classs",
        "prefix": "greaction",
        "body": [
            "ReactionDisposer? _disposer;",
            "@override",
            "void initState() {",
            "   _disposer = reaction((_) => store.state, ($1State s) {",
            "    s.when(",
            "      loading: () => showDialog(",
            "        context: context,",
            "        barrierDismissible: false,",
            "        builder: (_) => const Center(child: CircularProgressIndicator()),",
            "      ),",
            "      failure: () {",
            "      Navigator.pop(context);",
            "      final Failure? error = (s as $1StateFailure).error;",
            "      //TODO: implements $1StateFailure",
            "      },",
            "      success: () {",
            "      //TODO: implements $1StateSuccess",
            "},",
            "      orElse: () {},",
            "    );",
            "});",
            "super.initState();",
            "}",
            "",
            " @override",
            " void dispose() {",
            "   if (_disposer != null) _disposer!();",
            "   super.dispose();",
            "}",
        ],
    },
    "store": {
        "scope": "dart",
        "description": "Generate store for Classs",
        "prefix": "gstore",
        "body": [
            "import 'package:mobx/mobx.dart';",
            "",
            "import '$1_state.dart';",
            "part '$1_store.g.dart';",
            "",
            "class $1Store = _$1StoreBase with _$$1Store;",
            "",
            "abstract class _$1StoreBase with Store {",
            "",
            "  @observable",
            "  $1State state = $1StateEmpty();",
            "",
            "  @action",
            "  void update($1State newState) {",
            "    state = newState;",
            "  }",
            "",
            "}",
        ],
    }
}
